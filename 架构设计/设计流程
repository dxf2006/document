 闲鱼作为一款闲置物品交易平台，让用户的闲置物品再次得到价值流通，普惠每一位用户。先看下面几个业务场景：

   场景
   1：在闲鱼的一次活动中，用户进入活动会场后，浏览了几个不同的宝贝，就会奖励一个包邮券。
   场景
   2：用户关注的用户宝贝降价了，实时告知用户该降价信息。
   场景
   3：在用户搜索租房后，并浏览N个租房信息，则为其推送一套合适的房源。
   场景
   4：双十一会场活动，用户进入会场，点击商品详情，对其发送优惠。 
  
  看似不同的事务进行抽象，找出其共性，进行归纳和演绎，并通过设计一种架构，去解决该类似场景下的诸多业务，以减少重复性的劳作。
而架构的设计是有套路可以遵循的，然并卵，虽然了解了很多的架构原理、设计理念，但往往实际的操作过程中，很容易空对空，这里给出一种设计架构的套路步骤：
系统解决的问题定义->系统设计的目标->核心设计->各子系统模块的详细设计

1>系统解决的问题定义

问题的定义是从解决的业务场景出发的。上面的这些业务场景有哪些共性呢，用一句话可以描述为：“用户的一系列操作，满足一定的复杂规则条件后，
对其实时的触达相应的权益”。这里有一个要求，需要“实时”，能够秒级的触达用户。因此系统解决的问题可以定义为：能够处理复杂规则事件的实时触达系统。

2>系统设计目标

  有了对业务场景的问题定义，如何设计一个架构，去解决这个问题，在设计之初，老板给了一些目标要求：

   1.技术与业务分离，构建技术组件和能力，组合后实现业务需求；
   2.事件的数据格式需要结构化和标准化，支持扩展；
   3.规则的表达定义类似SQL的申明式DSL，贴合业务领域；
   4.客户端和服务端有各⾃的行动触发能力，⽀持扩展开发；客户端支持服务端驱动；
   5.触发和计算分离，计算模式插件化；
系统设计的目标是为了保证最终的实现和最初的想法不要出现太大的偏差，有一个衡量标准在，一是让项目内的成员依据此目标进行设计，
避免出现公说公有理、婆说婆有理的情况；二是项目的验收可以依据这个目标去评判，有理可依

